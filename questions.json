{
  "html": [
    {
      "id": 1,
      "text": "Which tag is used to create a link?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<link>", "isCorrect": false },
        { "id": 2, "text": "<a>", "isCorrect": true },
        { "id": 3, "text": "<href>", "isCorrect": false },
        { "id": 4, "text": "<anchor>", "isCorrect": false }
      ]
    },
    {
      "id": 2,
      "text": "Which tag is used to paste an image?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<img>", "isCorrect": true },
        { "id": 2, "text": "<picture>", "isCorrect": false },
        { "id": 3, "text": "<media>", "isCorrect": false },
        { "id": 4, "text": "<graphic>", "isCorrect": false }
      ]
    },
    {
      "id": 3,
      "text": "Which tag is used to paste a title in a webpage?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<head>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<meta>", "isCorrect": false }
      ]
    },
    {
      "id": 4,
      "text": "Which attribute is used to paste text if an image is not downloaded?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": false },
        { "id": 2, "text": "alt", "isCorrect": true },
        { "id": 3, "text": "title", "isCorrect": false },
        { "id": 4, "text": "href", "isCorrect": false }
      ]
    },
    {
      "id": 5,
      "text": "Which attribute allows opening a link in a new tab?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "target=_blank", "isCorrect": true },
        { "id": 2, "text": "target=blank", "isCorrect": false },
        { "id": 3, "text": "target=_self", "isCorrect": false },
        { "id": 4, "text": "target=_new", "isCorrect": false }
      ]
    },
    {
      "id": 6,
      "text": "Why do we use 'placeholder'?",
      "hasOptions": false,
      "answer": "The 'placeholder' attribute is used to display a text hint or example input in a form field before the user starts entering their data."
    },
    {
      "id": 7,
      "text": "How to create an unordered list in HTML?",
      "hasOptions": false,
      "answer": "To create an unordered list in HTML, the <ul> tag is used, and for defining each list item, the <li> tag is used."
    },
    {
      "id": 8,
      "text": "What is HTML?",
      "hasOptions": false,
      "answer": "HTML (HyperText Markup Language) is a standardized markup language used for creating and developing web pages. It is a system for marking up individual parts of a web page using tags enclosed in angle brackets."
    },
    {
      "id": 9,
      "text": "What does the <!DOCTYPE> tag do?",
      "hasOptions": false,
      "answer": "It is a declaration that informs the web browser about the version of the markup language used to create the web page. This helps the browser to display the page correctly."
    },
    {
      "id": 10,
      "text": "Which tag is used to create a table?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<table>", "isCorrect": true },
        { "id": 2, "text": "<grid>", "isCorrect": false },
        { "id": 3, "text": "<row>", "isCorrect": false },
        { "id": 4, "text": "<column>", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Which tag is used to create a table header?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<caption>", "isCorrect": false },
        { "id": 2, "text": "<th>", "isCorrect": false },
        { "id": 3, "text": "<thead>", "isCorrect": true },
        { "id": 4, "text": "<title>", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Which tag is used to create a table row?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<td>", "isCorrect": false },
        { "id": 2, "text": "<row>", "isCorrect": false },
        { "id": 3, "text": "<line>", "isCorrect": false },
        { "id": 4, "text": "<tr>", "isCorrect": true }
      ]
    },
    {
      "id": 13,
      "text": "Which tag is used to create a table cell?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<cell>", "isCorrect": false },
        { "id": 2, "text": "<tr>", "isCorrect": false },
        { "id": 3, "text": "<th>", "isCorrect": false },
        { "id": 4, "text": "<td>", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "What are semantic tags in HTML?",
      "hasOptions": false,
      "answer": "Semantic tags in HTML are tags that convey information about the meaning or purpose of the content, rather than just its appearance. Examples of semantic tags include header, footer, article, section, nav, and more. They help create more structured and accessible web pages."
    },
    {
      "id": 15,
      "text": "Which attribute is used to create a background image?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "background", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": false },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background-image", "isCorrect": true }
      ]
    },
    {
      "id": 16,
      "text": "Which tag is used to create a dropdown list?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<dropdown>", "isCorrect": false },
        { "id": 2, "text": "<list>", "isCorrect": false },
        { "id": 3, "text": "<select>", "isCorrect": true },
        { "id": 4, "text": "<option>", "isCorrect": false }
      ]
    },
    {
      "id": 17,
      "text": "Which tag is used to insert JavaScript code into an HTML document?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<javascript>", "isCorrect": false },
        { "id": 2, "text": "<script>", "isCorrect": true },
        { "id": 3, "text": "<js>", "isCorrect": false },
        { "id": 4, "text": "<java>", "isCorrect": false }
      ]
    },
    {
      "id": 18,
      "text": "Which attribute is used to specify the path to an image?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "src", "isCorrect": true },
        { "id": 2, "text": "href", "isCorrect": false },
        { "id": 3, "text": "path", "isCorrect": false },
        { "id": 4, "text": "url", "isCorrect": false }
      ]
    },
    {
      "id": 19,
      "text": "What does the 'readonly' attribute do in a form element?",
      "hasOptions": false,
      "answer": "The 'readonly' attribute makes a form element read-only, meaning the user cannot edit the element's value but can view it. This can be useful for displaying information that should not be changed."
    },
    {
      "id": 20,
      "text": "What are web standards and why are they important?",
      "hasOptions": false,
      "answer": "Web standards are recommendations developed by standardization groups like W3C or WHATWG to ensure compatibility and stability of web technologies. They include recommendations for HTML, CSS, JavaScript, and other web technologies. Adhering to web standards helps ensure correct rendering of web pages in various browsers and devices, as well as making web development and maintenance easier."
    },
    {
      "id": 21,
      "text": "What is responsive web design?",
      "hasOptions": false,
      "answer": "Responsive web design is an approach to web design that enables web pages to display and function correctly on different devices, including mobile phones, tablets, and desktop computers. It achieves this by using flexible layouts, responsive images, and CSS media queries to adapt the design to various screen sizes and device characteristics."
    },
    {
      "id": 22,
      "text": "Which HTML tag is used to embed video?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<media>", "isCorrect": false },
        { "id": 2, "text": "<video>", "isCorrect": true },
        { "id": 3, "text": "<movie>", "isCorrect": false },
        { "id": 4, "text": "<multimedia>", "isCorrect": false }
      ]
    },
    {
      "id": 23,
      "text": "Which tag is used to create the main heading on a web page?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<h1>", "isCorrect": true },
        { "id": 2, "text": "<header>", "isCorrect": false },
        { "id": 3, "text": "<title>", "isCorrect": false },
        { "id": 4, "text": "<head>", "isCorrect": false }
      ]
    },
    {
      "id": 24,
      "text": "What does the <br> tag do?",
      "hasOptions": false,
      "answer": "It is used to move the string to the next line."
    },
    {
      "id": 25,
      "text": "Which tag is used to create an ordered list?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "<ul>", "isCorrect": false },
        { "id": 2, "text": "<ol>", "isCorrect": true },
        { "id": 3, "text": "<li>", "isCorrect": false },
        { "id": 4, "text": "<list>", "isCorrect": false }
      ]
    },
    {
      "id": 26,
      "text": "What is DOM in the context of web development?",
      "hasOptions": false,
      "answer": "DOM (Document Object Model) is a programmatic interface for web documents. It represents the structured document as an object model, allowing programs and scripts to interact with the content, structure, and styles of a web page. DOM represents the document as a tree of objects, each corresponding to a part of the page."
    },
    {
      "id": 27,
      "text": "Which attribute is used to define styles for an element on a page?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "style", "isCorrect": true },
        { "id": 2, "text": "css", "isCorrect": false },
        { "id": 3, "text": "styles", "isCorrect": false },
        { "id": 4, "text": "stylesheet", "isCorrect": false }
      ]
    },
    {
      "id": 28,
      "text": "What is the 'alt' attribute in the <img> tag used for?",
      "hasOptions": false,
      "answer": "It is used to provide alternative text that will be displayed if the image cannot be loaded. It is also useful for accessibility, as screen readers can use this text to describe the image to users with disabilities."
    }
  ],
  "css": [
    {
      "id": 1,
      "text": "What is the difference between 'reset' and 'normalize' in CSS? Which one would you choose and why?",
      "hasOptions": false,
      "answer": "'Reset' resets all the default browser styles for elements.\n'Normalize' standardizes styles across all browsers.\nIt's better to use 'Normalize' for cross-browser consistency.\n\nLearn more: [Specificity (MDN)](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity)"
    },
    {
      "id": 2,
      "text": "What is CSS selector specificity, and how does it work?",
      "hasOptions": false,
      "answer": "CSS selector specificity (also known as specificity weight) is a property that determines the priority of a style rule, determining which style will be applied to an HTML element. For example, when using a UI library, default styles are applied to its elements. If needed, you can override those styles with more specific selectors.\n\nLearn more: [Specificity (MDN)](https://developer.mozilla.org/en-US/docs/Web/CSS/Specificity)"
    },
    {
      "id": 3,
      "text": "What is CSS (Cascading Style Sheets)?",
      "hasOptions": false,
      "answer": "CSS (Cascading Style Sheets) is a style language used to describe the appearance and formatting of a document written in a markup language like HTML. CSS enables developers to control layout, fonts, colors, and other stylistic aspects of a web page.\n\nLearn more: [CSS Introduction (MDN)](https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Fundamentals/Introduction_to_CSS)"
    },
    {
      "id": 4,
      "text": "Why is it generally recommended to place CSS in the <head> and <script> just before the </body> tag? Are there any exceptions, and can you provide examples?",
      "hasOptions": false,
      "answer": "Styles are recommended to be placed in the <head> to ensure the page takes on its desired appearance as quickly as possible. Scripts placed in the <head> can potentially slow down this process, so it's advised to include them just before the closing </body> tag. One exception is analytics scripts that track user engagement before the page fully loads. In such cases, the script should be included in the <head>.\n\nLearn more: [Optimize CSS Delivery (Google Developers)](https://developers.google.com/speed/docs/insights/OptimizeCSSDelivery)"
    },
    {
      "id": 5,
      "text": "What does the 'z-index' property do in CSS?",
      "hasOptions": false,
      "answer": "The 'z-index' property in CSS controls the stacking order of elements along the Z-axis. An element with a higher 'z-index' value will be displayed above an element with a lower 'z-index' value.\n\nLearn more: [z-index (MDN)](https://developer.mozilla.org/en-US/docs/Web/CSS/z-index)"
    },
    {
      "id": 6,
      "text": "What are the various ways to center a div in CSS?",
      "hasOptions": false,
      "answer": "There are several ways to center a div in CSS. Here are some of them:\n1. Using the margin property: `margin: 0 auto;`.\n2. Utilizing Flexbox: `display: flex; justify-content: center; align-items: center;`.\n3. Employing Grid Layout: `display: grid; place-items: center;`.\n4. Combining 'text-align' and 'inline-block' properties: `text-align: center;` on the parent element and `display: inline-block;` on the div itself.\n\nLearn more: [Centering in CSS (CSS-Tricks)](https://css-tricks.com/centering-css-complete-guide/)"
    },
    {
      "id": 7,
      "text": "Which property is used to set the background color?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "color", "isCorrect": false },
        { "id": 2, "text": "background-color", "isCorrect": true },
        { "id": 3, "text": "bgcolor", "isCorrect": false },
        { "id": 4, "text": "background", "isCorrect": false }
      ]
    },
    {
      "id": 8,
      "text": "Which property allows you to set the external margins of an element?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "padding", "isCorrect": false },
        { "id": 2, "text": "border", "isCorrect": false },
        { "id": 3, "text": "margin", "isCorrect": true },
        { "id": 4, "text": "spacing", "isCorrect": false }
      ]
    },
    {
      "id": 9,
      "text": "Which property is used to set the font in CSS?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "font-weight", "isCorrect": false },
        { "id": 2, "text": "font-style", "isCorrect": false },
        { "id": 3, "text": "text-font", "isCorrect": false },
        { "id": 4, "text": "font-family", "isCorrect": true }
      ]
    },
    {
      "id": 10,
      "text": "Which CSS property allows you to control an element's visibility in the DOM while preserving its space?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "display: none", "isCorrect": false },
        { "id": 2, "text": "visibility: hidden", "isCorrect": true },
        { "id": 3, "text": "is-visible: 0", "isCorrect": false },
        { "id": 4, "text": "color: transparent", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Which CSS property is used to apply shadows to elements?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "box-shadow", "isCorrect": true },
        { "id": 2, "text": "text-shadow", "isCorrect": false },
        { "id": 3, "text": "shadow", "isCorrect": false },
        { "id": 4, "text": "border-shadow", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Which selector in CSS selects all .child elements that are immediate children of .parent?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": ".parent + .child", "isCorrect": false },
        { "id": 2, "text": ".parent ~ .child", "isCorrect": false },
        { "id": 3, "text": ".parent > .child", "isCorrect": true },
        { "id": 4, "text": ".parent .child", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Which CSS selector selects all elements that have a specified attribute starting with a specific string?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr^=value]", "isCorrect": true }
      ]
    },
    {
      "id": 14,
      "text": "Which CSS selector selects all elements that have a specified attribute ending with a specific string?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "[attr=value]", "isCorrect": false },
        { "id": 2, "text": "[attr~=value]", "isCorrect": false },
        { "id": 3, "text": "[attr|=value]", "isCorrect": false },
        { "id": 4, "text": "[attr$=value]", "isCorrect": true }
      ]
    }
  ],
"javascript": [
    {
      "id": 1,
      "text": "What is a pure function?",
      "hasOptions": false,
      "answer": "A pure function is a function that returns the same result when called with the same set of arguments and does not have any side effects.\nGet more info with: (https://developer.mozilla.org/en-US/docs/Glossary/Pure_function)"
    },
    {
      "id": 2,
      "text": "What is a closure?",
      "hasOptions": false,
      "answer": "Closures are the ability of a function to remember the lexical environment in which it was created, meaning it retains a reference to that environment and can access it.\nLearn more: (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures)"
    },
    {
      "id": 3,
      "text": "let VS const: Why is it better to use const whenever possible?",
      "hasOptions": false,
      "answer": "Using const provides two advantages:\n1) Safety: Declaring variables through const protects against unexpected changes to the variable's value in the code, which often leads to errors and unexpected program behavior.\n2) Readability: Using const allows the code reader to understand that the variable's value will not change during program execution, making the code more understandable and reducing the possibility of errors.\nGet more info:\n[Link to JavaScript Documentation on Constants](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/const)"
    },
    {
      "id": 4,
      "text": "What are Promises in JavaScript?",
      "hasOptions": false,
      "answer": "Promises are objects that represent the result of an asynchronous operation. They can be in one of three states: pending, fulfilled, or rejected.\nLearn more: (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise)"
    },
    {
      "id": 5,
      "text": "What is destructuring in JavaScript?",
      "hasOptions": false,
      "answer": "Destructuring allows you to extract individual properties from objects or elements from arrays and assign them to variables in a more convenient form. For example, you can extract the name and address of a user object in a single line: 'const {name, address} = user;'.\nGet more info with: (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Destructuring_assignment)"
    },
    {
      "id": 6,
      "text": "What are arrow functions in JavaScript?",
      "hasOptions": false,
      "answer": "Arrow functions are a syntactically compact way to write functions in JavaScript, and they do not have their own 'this' binding. They are often used for creating anonymous functions.\nLearn more: (https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions)"
    },
    {
      "id": 7,
      "text": "What is hoisting in JavaScript?",
      "hasOptions": false,
      "answer": "Hoisting is a mechanism in JavaScript where variables and function declarations are moved to the top of their scope before the code is executed.\nGet more info : (https://developer.mozilla.org/en-US/docs/Glossary/Hoisting)"
    },
    {
      "id": 8,
      "text": "Which method is used to add an element to an array?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": false },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": true }
      ]
    },
    {
      "id": 9,
      "text": "Which object represents the current browser window?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "document", "isCorrect": false },
        { "id": 2, "text": "screen", "isCorrect": false },
        { "id": 3, "text": "window", "isCorrect": true },
        { "id": 4, "text": "browser", "isCorrect": false }
      ]
    },
    {
      "id": 10,
      "text": "Which operator is used for strict equality comparison?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "==", "isCorrect": false },
        { "id": 2, "text": "===", "isCorrect": true },
        { "id": 3, "text": "=", "isCorrect": false },
        { "id": 4, "text": "!==", "isCorrect": false }
      ]
    },
    {
      "id": 11,
      "text": "Which method is used to remove the last element from an array?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "splice()", "isCorrect": false },
        { "id": 2, "text": "pop()", "isCorrect": true },
        { "id": 3, "text": "shift()", "isCorrect": false },
        { "id": 4, "text": "push()", "isCorrect": false }
      ]
    },
    {
      "id": 12,
      "text": "Which method in JavaScript is used to convert an object to a JSON string?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "JSON.stringify()", "isCorrect": true },
        { "id": 2, "text": "JSON.parse()", "isCorrect": false },
        { "id": 3, "text": "JSON.toText()", "isCorrect": false },
        { "id": 4, "text": "JSON.toString()", "isCorrect": false }
      ]
    },
    {
      "id": 13,
      "text": "Which object in JavaScript is used for working with date and time?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "Time", "isCorrect": false },
        { "id": 2, "text": "Date", "isCorrect": true },
        { "id": 3, "text": "Calendar", "isCorrect": false },
        { "id": 4, "text": "DateTime", "isCorrect": false }
      ]
    },
    {
      "id": 14,
      "text": "Which array method in JavaScript is used for filtering elements based on a specific criterion?",
      "hasOptions": true,
      "options": [
        { "id": 1, "text": "map()", "isCorrect": false },
        { "id": 2, "text": "filter()", "isCorrect": true },
        { "id": 3, "text": "reduce()", "isCorrect": false },
        { "id": 4, "text": "forEach()", "isCorrect": false }
      ]
    }
  ],
"react": [
  {
    "id": 1,
    "text": "What is React JS?",
    "hasOptions": false,
    "answer": "React JS, or simply React, is an open-source JavaScript library for creating user interfaces, especially for single-page applications (SPAs). Its key features include:\n1) Component approach: React is built on the concept of components, allowing developers to easily create reusable code fragments.\n2) Virtual DOM: React uses a virtual DOM to track changes. It's an abstraction of the real DOM, enabling the library to update only those parts of the interface that have changed, resulting in faster updates.\n3) Hooks: The introduction of hooks made it possible to use state and other class component features in functional components, making code shorter and more pure.\n4) Community and ecosystem: React has a large and active developer community, along with many libraries and tools created by the community to facilitate the development of complex applications.\nLearn more: <a href='https://reactjs.org/' target='_blank'>React Documentation (English)</a>"
  },
  {
    "id": 2,
    "text": "Why do you need a 'key' attribute in a list?",
    "hasOptions": false,
    "answer": "Keys help React identify which elements have been changed, added, or removed in a list. They are necessary for React to reconcile elements over time. The best way to choose a key is to use a string that will explicitly distinguish the list item from its siblings. Ideally, you should use IDs from your data as keys. Array indices can also be used as keys, but only if the items in the array are not added to the beginning, rearranged, or removed.\nLearn more: <a href='https://reactjs.org/docs/lists-and-keys.html' target='_blank'>React Documentation (English)</a>"
  },
  {
    "id": 3,
    "text": "How does the 'children' prop work?",
    "hasOptions": false,
    "answer": "Some components don't know their children in advance. This is especially true for components like Sidebar or Dialog, which act as a kind of 'box' into which you can place content. For such components, you can use a special 'children' prop, which passes the child elements directly to the output.\n\nLearn more: <a href='https://react.dev/learn/passing-props-to-a-component#passing-jsx-as-children' target='_blank'>React Documentation (English)</a>"
  },
  {
    "id": 4,
    "text": "What are Portals in React?",
    "hasOptions": false,
    "answer": "Portals allow you to render child elements in a DOM node that is outside the DOM hierarchy of the parent component. A common use case for portals is when the parent component has styles like 'overflow: hidden' or 'z-index,' but you need the child element to visually break out of its container. This is often used for modal dialogs, pop-up cards, and tooltips.\nLearn more: <a href='https://reactjs.org/docs/portals.html' target='_blank'>React Documentation (English)</a>"
  },
  {
    "id": 5,
    "text": "What is Reconciliation?",
    "hasOptions": false,
    "answer": "Reconciliation is the process by which React updates the DOM. When a component's state changes, React needs to determine the need to update the DOM. This is done by creating a virtual DOM and comparing it to the current DOM. In this context, the virtual DOM will contain the new state of the component.\nLearn more: <a href='https://reactjs.org/docs/reconciliation.html' target='_blank'>React Documentation (English)</a>"
  },
  {
    "id": 6,
    "text": "What is the purpose of the useEffect hook in React?",
    "hasOptions": true,
    "options": [
      {
        "id": 1,
        "text": "Storing component state",
        "isCorrect": false
      },
      {
        "id": 2,
        "text": "Handling side effects",
        "isCorrect": true
      },
      {
        "id": 3,
        "text": "Memoizing values",
        "isCorrect": false
      },
      {
        "id": 4,
        "text": "Creating references to DOM elements",
        "isCorrect": false
      }
    ]
  },
  {
    "id": 7,
    "text": "What happens if you pass an empty array '[]' as the second argument to useEffect?",
    "hasOptions": true,
    "options": [
      {
        "id": 1,
        "text": "Error",
        "isCorrect": false
      },
      {
        "id": 2,
        "text": "useEffect will be executed 0 times",
        "isCorrect": false
      },
      {
        "id": 3,
        "text": "useEffect will be executed 1 time",
        "isCorrect": true
      },
      {
        "id": 4,
        "text": "No correct answer",
        "isCorrect": false
      }
    ]
    
  },
  {
    "id": 8,
    "text": "Which hook is used to create state in a component?",
    "hasOptions": true,
    "options": [
      {
        "id": 1,
        "text": "useEffect",
        "isCorrect": false
      },
      {
        "id": 2,
        "text": "useState",
        "isCorrect": true
      },
      {
        "id": 3,
        "text": "useContext",
        "isCorrect": false
      },
      {
        "id": 4,
        "text": "useReducer",
        "isCorrect": false
      }
    ]
  },
  {
    "id": 9,
    "text": "Which element is used to group elements without adding additional nodes to the DOM?",
    "hasOptions": true,
    "options": [
      {
        "id": 1,
        "text": "<Group>",
        "isCorrect": false
      },
      {
        "id": 2,
        "text": "<Div>",
        "isCorrect": false
      },
      {
        "id": 3,
        "text": "<Fragment> (<>)",
        "isCorrect": true
      },
      {
        "id": 4,
        "text": "<List>",
        "isCorrect": false
      }
    ]
  },
  {
    "id": 10,
    "text": "We have an array of strings (arr), each of which we want to render on the page. Which array method should be used in the component's return?",
    "hasOptions": true,
    "options": [
      {
        "id": 1,
        "text": "{arr.forEach(...)}",
        "isCorrect": false
      },
      {
        "id": 2,
        "text": "{arr.filter(...)}",
        "isCorrect": false
      },
      {
        "id": 3,
        "text": "{arr.for(...)}",
        "isCorrect": false
      },
      {
        "id": 4,
        "text": "{arr.map(...)}",
        "isCorrect": true
      }
    ]
  },
  {
    "id": 11,
    "text": "Which element is used to handle errors in the component tree?",
    "hasOptions": true,
    "options": [
      {
        "id": 1,
        "text": "ErrorBoundary",
        "isCorrect": true
      },
      {
        "id": 2,
        "text": "CatchError",
        "isCorrect": false
      },
      {
        "id": 3,
        "text": "ErrorWrapper",
        "isCorrect": false
      },
      {
        "id": 4,
        "text": "ErrorCatcher",
        "isCorrect": false
      }
    ]
  },
  {
    "id": 12,
    "text": "What argument(s) does the useMemo hook accept?",
    "hasOptions": true,
    "options": [
      {
        "id": 1,
        "text": "A function and an array of dependencies",
        "isCorrect": true
      },
      {
        "id": 2,
        "text": "A function and an options object",
        "isCorrect": false
      },
      {
        "id": 3,
        "text": "A function",
        "isCorrect": false
      },
      {
        "id": 4,
        "text": "An array of dependencies",
        "isCorrect": false
      }
    ]
  },
  {
    "id": 13,
    "text": "What is the purpose of the useCallback hook in React?",
    "hasOptions": true,
    "options": [
      {
        "id": 1,
        "text": "Creating references to DOM elements",
        "isCorrect": false
      },
      {
        "id": 2,
        "text": "Storing component state",
        "isCorrect": false
      },
      {
        "id": 3,
        "text": "Handling side effects",
        "isCorrect": false
      },
      {
        "id": 4,
        "text": "Memoizing functions",
        "isCorrect": true
      }
    ]
  }
],
  "TypeScript": [
    {
      "id": 1,
      "text": "What is the main Advantages of TypeScript:",
      "hasOptions": false,
      "answer": "Problems are highlighted throughout development and at compilation time.\nTypescript can be run in any browser or JavaScript engine. \nA namespace notion is created by declaring a module. \nIntelliSense is a TypeScript feature that provides active hints as you type.\nStrongly typed or static typing is supported. The advantage of TypeScript is that it is strictly typed or allows for static typing. Because of static typing, it may confirm type correctness at compilation time.\nLearn more: https://itjet.io/blog/what-is-typescript"
    },
    {
      "id": 2,
      "text": "What is TypeScript",
      "hasOptions": false,
      "answer": "TypeScript is a variant of JavaScript with a few more features. TypeScript extends JavaScript with extra syntax to provide a more robust interface with your editor. TypeScript is a scripting language that is compatible with JavaScript and relies on type inference to deliver advanced functionality without the need for additional code.\nLearn more : https://itjet.io/blog/what-is-typescript"
    },
    {
      "id": 3,
      "text": "What is arrays in TypeScript ?",
      "hasOptions": false,
      "answer": "A collection of values of the same data type is called an array.,It's a kind that's been defined by the user. To store values of the same kind, you use arrays. Arrays are collections of values that are ordered and indexed. The indexing begins at zero, with the first element having index 0, the second having index 1, and so on.\n var array_name[:datatype];//declaration \n array_name = [val1,val2,valn..]//initialization.\nLearn more : https://www.w3schools.com/typescript/typescript_arrays.php"
    }
  ]
}






